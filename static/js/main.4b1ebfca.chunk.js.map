{"version":3,"sources":["components/Cell.js","lib/index.js","components/Board.js","components/ScreenBoxView.js","components/StatusLineView.js","components/hasWinningCond.js","components/View.js","img/beth.jpg","img/green.jpg","img/morty.jpg","img/Rick-and-Morty-Doaly.jpg","img/rick-and-morty.jpg","img/bad.jpg","components/initialBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Status","isOpen","cell","status","isDone","isFailed","isBlocking","View","onClick","symbol","className","classByStatus","src","alt","toLowerCase","allEquals","xs","length","head","tail","R","i","board","setStatusAt","setStatusesBy","predFn","getStatusesBy","getSymbolsBy","Cell","BoardView","onClickAt","useEffect","sort","Math","random","map","_","ScreenView","children","ScreenBoxView","Running","Stopped","style","textAlign","Won","color","Lost","StatusLineView","secondsLeft","setStatus","state","nextSecond","max","useState","startGame","setState","hasWinningCond","hasLosingCond","openSymbols","L","Board","failStep1","setTimeout","failStep2","succeedStep","timer","setInterval","clearInterval","e","openCell","initialBoard","beth","green","morty","Rick","rick","bad","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b1ebfca.chunk.js","sourcesContent":["import React from 'react';\n\nexport let Status = {\n  Open: \"Open\",\n  Closed: \"Closed\",\n  Done: \"Done\",\n  Failed: \"Failed\",\n}\n\nexport let isOpen = (cell) => cell.status === Status.Open\n\nexport let isClosed = (cell) => cell.status === Status.Closed\n\nexport let isDone = (cell) => cell.status === Status.Done\n\nexport let isFailed = (cell) => cell.status === Status.Failed\n\nexport let isBlocking = (cell) => isOpen(cell) || isFailed(cell)\n\nexport function View({cell, onClick}) {\n  let {status, symbol} = cell\n  return <div className={`cell ${classByStatus(status)}`} onClick={onClick} >\n    {status === Status.Closed ? \"\"\n      : <img\n        src={symbol}\n        alt=\"Rick n Morty\"\n        className=\"img\"\n      ></img>\n      }\n  </div>\n}\n\nexport function classByStatus(status) {\n  return status.toLowerCase()\n}\n","import * as R from \"rambda\"\n\nexport function allEquals(xs) {\n  if (xs.length < 2) {\n    return true\n  }\n  let [head, ...tail] = xs\n  return R.all(R.equals(head), tail)\n}\n","import * as R from \"rambda\"\nimport React, { useEffect } from \"react\"\nimport * as L from \"../lib\"\nimport * as Cell from \"./Cell\"\n\nexport let getStatusAt = R.curry((i, board) => {\n  return R.view(R.lensPath(`${i}.status`), board)\n})\n\nexport let setStatusAt = R.curry((i, status, board) => {\n  return R.set(R.lensPath(`${i}.status`), status, board)\n})\n\nexport let setStatusesBy = R.curry((predFn, status, board) => {\n  return R.map(cell => predFn(cell) ? {...cell, status} : cell, board)\n})\n\nexport let getStatusesBy = R.curry((predFn, board) => {\n  return R.chain(cell => predFn(cell) ? [cell.status] : [], board)\n})\n\nexport let getSymbolsBy = R.curry((predFn, board) => {\n  return R.chain(cell => predFn(cell) ? [cell.symbol] : [], board)\n})\n\nexport let canOpenAt = R.curry((i, board) => {\n  return i < board.length\n    && Cell.isClosed(board[i])\n    && getStatusesBy(Cell.isBlocking, board).length < 2\n})\n\nexport let areOpensEqual = (board) => {\n  let openSymbols = getSymbolsBy(Cell.isOpen, board)\n  return openSymbols.length >= 2 && L.allEquals(openSymbols)\n}\n\nexport let areOpensDifferent = (board) => {\n  let openSymbols = getSymbolsBy(Cell.isOpen, board)\n  return openSymbols.length >= 2 && !L.allEquals(openSymbols)\n}\n\nexport function BoardView({board, onClickAt}) {\n  useEffect(() => {\n    board.sort(() => Math.random() - 0.5)\n  }, []);\n\n  return <div className=\"board\">\n    {board\n      .map((cell, i) =>\n      <Cell.View key={i} cell={cell} onClick={_ => onClickAt(i)}/>\n    )}\n  </div>\n}\n\nexport function ScreenView({className, children}) {\n  return <div className={`screen ${className}`}>\n    {children}\n  </div>\n}\n","import React from \"react\";\nimport * as Board from \"./Board\";\nimport { Status } from \"../App\";\n\nexport function ScreenBoxView({ status, board, onClickAt }) {\n  // eslint-disable-next-line default-case\n  switch (status) {\n    case Status.Running:\n      return <Board.BoardView board={board} onClickAt={onClickAt} />;\n\n    case Status.Stopped:\n      return <Board.ScreenView className=\"gray\">\n        <div style={{ textAlign: \"center\" }}>\n          <h1>Memory Game</h1>\n          <p>Click anywhere to start!</p>\n        </div>\n      </Board.ScreenView>;\n\n    case Status.Won:\n      return <Board.ScreenView className=\"green\">\n        <div style={{ textAlign: \"center\", color: \"green\"}}>\n          <h1 className=\"victory-title\">Victory!</h1>\n          <p className=\"victory-text\">Click anywhere to try again!</p>\n        </div>\n      </Board.ScreenView>;\n\n    case Status.Lost:\n      return <Board.ScreenView className=\"red\">\n        <div style={{ textAlign: \"center\" }}>\n          <h1 className=\"main-text\">Defeat!</h1>\n          <p className=\"text\">Click anywhere to try again!</p>\n        </div>\n      </Board.ScreenView>;\n  }\n}\n","import React from \"react\";\nimport { Status } from \"../App\";\n\n\n\nexport function StatusLineView({ status, secondsLeft }) {\n  return <div className=\"status-line\">\n    <div className=\"timer\">\n      {status === Status.Running && `Seconds left: ${secondsLeft}`}\n    </div>\n  </div>;\n}\n","import * as R from \"rambda\";\nimport * as Cell from \"./Cell\";\n\n\n\nexport let hasWinningCond = (state) => (\n  R.filter(Cell.isDone, state.board).length === state.board.length\n);\n\nexport let hasLosingCond = (state) => !state.secondsLeft;\n\nexport let setStatus = R.curry((status, state) => ({ ...state, status }));\n\nexport let nextSecond = (state) => ({\n  ...state, secondsLeft: Math.max(state.secondsLeft - 1, 0),\n});\n","import React, { useEffect, useState } from \"react\";\nimport * as Board from \"./Board\";\nimport { startGame, Status, openCell, succeedStep, failStep1, failStep2 } from \"../App\";\nimport { ScreenBoxView } from \"./ScreenBoxView\";\nimport { StatusLineView } from \"./StatusLineView\";\nimport { hasWinningCond, setStatus, hasLosingCond, nextSecond } from \"./hasWinningCond\";\n\n\nexport function View() {\n  let [state, setState] = useState({\n    ...startGame(),\n    status: Status.Stopped,\n  });\n\n  let { board, status, secondsLeft } = state;\n\n  function handleStartingClick() {\n    if (status !== Status.Running) {\n      setState(startGame);\n    }\n  }\n\n  function handleRunningClick(e) {\n    if (status === Status.Running) {\n      setState(openCell(e));\n    }\n  }\n\n  useEffect(_ => {\n    if (status === Status.Running) {\n      if (hasWinningCond(state)) {\n        return setState(setStatus(Status.Won));\n      }\n      else if (hasLosingCond(state)) {\n        return setState(setStatus(Status.Lost));\n      }\n    }\n  }, [state]);\n\n  useEffect(_ => {\n    if (Board.areOpensEqual(board)) {\n      setState(succeedStep);\n    } else if (Board.areOpensDifferent(board)) {\n      setState(failStep1);\n      setTimeout(_ => {\n        setState(failStep2);\n      }, 500);\n    }\n  }, [board]);\n\n  useEffect(_ => {\n    let timer = null;\n    if (status === Status.Running && !timer) {\n      timer = setInterval(() => {\n        setState(nextSecond);\n      }, 1000);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [status]);\n\n  return <div onClick={handleStartingClick}>\n    <StatusLineView status={status} secondsLeft={secondsLeft} />\n    <ScreenBoxView status={status} board={board} onClickAt={handleRunningClick} />\n  </div>;\n}\n","export default __webpack_public_path__ + \"static/media/beth.29a4c2a2.jpg\";","export default __webpack_public_path__ + \"static/media/green.e05003c6.jpg\";","export default __webpack_public_path__ + \"static/media/morty.26c22d26.jpg\";","export default __webpack_public_path__ + \"static/media/Rick-and-Morty-Doaly.0716bb12.jpg\";","export default __webpack_public_path__ + \"static/media/rick-and-morty.c57b1dc2.jpg\";","export default __webpack_public_path__ + \"static/media/bad.5ba423ac.jpg\";","import * as Cell from \"./Cell\";\nimport beth from \"../img/beth.jpg\";\nimport green from \"../img/green.jpg\";\nimport morty from \"../img/morty.jpg\";\nimport Rick from \"../img/Rick-and-Morty-Doaly.jpg\";\nimport rick from \"../img/rick-and-morty.jpg\";\nimport bad from \"../img/bad.jpg\";\n\nexport let initialBoard = [\n  { symbol: beth, status: Cell.Status.Closed },\n  { symbol: green, status: Cell.Status.Closed },\n  { symbol: morty, status: Cell.Status.Closed },\n  { symbol: Rick, status: Cell.Status.Closed },\n  { symbol: rick, status: Cell.Status.Closed },\n  { symbol: bad, status: Cell.Status.Closed },\n  { symbol: beth, status: Cell.Status.Closed },\n  { symbol: green, status: Cell.Status.Closed },\n  { symbol: morty, status: Cell.Status.Closed },\n  { symbol: Rick, status: Cell.Status.Closed },\n  { symbol: rick, status: Cell.Status.Closed },\n  { symbol: bad, status: Cell.Status.Closed },\n\n];\n","import * as R from \"rambda\"\nimport React from \"react\"\nimport * as Cell from \"./components/Cell\"\nimport * as Board from \"./components/Board\"\nimport { View } from \"./components/View\";\nimport { initialBoard } from \"./components/initialBoard\";\n\nimport './styles/reset.css';\nimport './styles/index.css';\n\nfunction App() {\n  return (\n    <>\n  <View />\n   </>\n  )\n}\n\nexport let Status = {\n  Stopped: \"Stopped\",\n  Running: \"Running\",\n  Won: \"Won\",\n  Lost: \"Lost\",\n}\n\nexport let startGame = (state) => ({\n  board: initialBoard,\n  secondsLeft: 60,\n  status: Status.Running,\n})\n\nexport let openCell = R.curry((i, state) => ({\n  ...state,\n  board: Board.setStatusAt(i, Cell.Status.Open, state.board),\n}))\n\nexport let succeedStep = (state) => ({\n  ...state,\n  board: Board.setStatusesBy(Cell.isOpen, Cell.Status.Done, state.board)\n})\n\nexport let failStep1 = (state) => ({\n  ...state,\n  board: Board.setStatusesBy(Cell.isOpen, Cell.Status.Failed, state.board),\n})\n\nexport let failStep2 = (state) => ({\n  ...state,\n  board: Board.setStatusesBy(Cell.isFailed, Cell.Status.Closed, state.board),\n})\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}